#
# Copyright (C) 2025, Advanced Micro Devices, Inc. All rights reserved.
#
# The purpose of this file is to generate multiple testcases
# covering different combinations of input parameters possible
# for the lpgemm kernel. The generated testcases are written to
# a file named "accuracy_test_data_lpgemm.txt" in the same directory.
#
# To test the lpgemm kernels, feed the input file generated by this
# script to the bench using the following command:
# "./bench_lpgemm_blis.x -m a -n 1 -i accuracy_test_data_lpgemm.txt"
#
# To-Do: Add more testcases to cover testing of 5-loop framework
# taking blocksizes into consideration based on API being tested.

ops = {
    #In,acc type: [out_types]
    "f32f32f32"   : ["f32"],
    "bf16bf16f32" : ["f32", "bf16"],
    #"bf16s4f32"   : ["f32", "bf16"],
    "s8s8s32"     : ["s32", "u8", "s8", "bf16", "f32"],
    "u8s8s32"     : ["s32", "u8", "s8", "bf16", "f32"]
}
post_ops = ["none", "bias", "relu", "prelu", "clip", "matrix_add", "matrix_mul",
#            "swish", "gelu_tanh", "gelu_erf", "tanh", "sigmoid",
            "scale=scalar,zp=scalar", "scale=vector,zp=scalar", "scale=scalar,zp=vector","scale=vector,zp=vector"]


ofile = open("accuracy_test_data_lpgemm.txt", "w")

for stor in ["r"]:
    packb_list = ["n", "p"] if stor == "c" else ["n", "p", "r"]
    for transa in ["n", "t"]:
        for transb in ["n", "t"]:
            for packa in ["n"]:
                for packb in packb_list:
                    for m in range( 6, 0, -1):
                        for n in [64, 48, 32, 16, 10, 1]:
                            for k in [32, 256, 1024]:
                                if( stor == "c" ):
                                    stride_a = m if transa == "n" else k
                                    stride_b = k if transb == "n" else n
                                    stride_c = m
                                else:
                                    stride_a = k if transa == "n" else m
                                    stride_b = n if transb == "n" else k
                                    stride_c = n
                                dims = " ".join([str(m), str(n), str(k), str(stride_a), str(stride_b), str(stride_c)])
                                chars = " ".join([stor, transa, transb, packa, packb])
                                for inputtypes in ops:
                                    for output_type in ops[inputtypes]:
                                        op = inputtypes + "o" + output_type
                                        for post_op in post_ops:
                                            if post_op == "bias" or post_op == "matrix_add" or post_op == "matrix_mul":
                                                if( output_type == "u8"):
                                                    post_op += "=" + "na"
                                                else:
                                                    post_op += "=" + output_type
                                                ofile.write(chars + " " + dims + " " + op + ":" + post_op + "\n")
ofile.close()
